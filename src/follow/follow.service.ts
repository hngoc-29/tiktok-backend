import { Injectable } from '@nestjs/common';
import { PrismaService } from 'src/config/database';

@Injectable()
export class FollowService {
    constructor(private readonly prismaService: PrismaService) { }

    async followUser(followerId: number, followingId: number) {
        try {
            // Ki·ªÉm tra ƒë√£ follow ch∆∞a
            const existingFollow = await this.prismaService.follow.findUnique({
                where: {
                    followerId_followingId: { // üëà c·∫ßn @@unique([followerId, followingId]) trong schema
                        followerId,
                        followingId,
                    },
                },
            });

            if (existingFollow) {
                return {
                    success: false,
                    message: 'ƒê√£ theo d√µi ng∆∞·ªùi d√πng n√†y',
                };
            }

            // N·∫øu ch∆∞a follow th√¨ t·∫°o m·ªõi
            const follow = await this.prismaService.follow.create({
                data: {
                    follower: { connect: { id: followerId } },
                    following: { connect: { id: followingId } },
                },
            });

            return {
                success: true,
                message: 'Theo d√µi th√†nh c√¥ng',
                data: follow,
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi theo d√µi ng∆∞·ªùi d√πng',
            };
        }
    }
    async unfollowUser(followerId: number, followingId: number) {
        try {
            // Ki·ªÉm tra xem ƒë√£ follow ch∆∞a
            const existingFollow = await this.prismaService.follow.findUnique({
                where: {
                    followerId_followingId: {
                        followerId,
                        followingId,
                    },
                },
            });

            if (!existingFollow) {
                return {
                    success: false,
                    message: 'Kh√¥ng theo d√µi ng∆∞·ªùi d√πng n√†y',
                };
            }

            // N·∫øu ƒë√£ follow th√¨ x√≥a
            await this.prismaService.follow.delete({
                where: {
                    followerId_followingId: {
                        followerId,
                        followingId,
                    },
                },
            });

            return {
                success: true,
                message: 'H·ªßy theo d√µi th√†nh c√¥ng',
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi h·ªßy theo d√µi ng∆∞·ªùi d√πng',
            };
        }
    }
    async getFollowers(userId: number, skip = 0, take = 10) {
        try {
            const followers = await this.prismaService.follow.findMany({
                where: { followingId: userId },
                orderBy: { id: 'desc' }, // üëà id l·ªõn h∆°n = follow m·ªõi h∆°n
                skip,
                take,
                include: {
                    follower: {
                        select: { id: true, fullname: true, username: true }, // tu·ª≥ b·∫°n mu·ªën l·∫•y field n√†o
                    },
                },
            });

            return {
                success: true,
                data: followers.map(f => f.follower), // ch·ªâ tr·∫£ v·ªÅ user follower
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi theo d√µi',
                error: error.message,
            };
        }
    }
    async getFollowing(userId: number, skip = 0, take = 10) {
        try {
            const following = await this.prismaService.follow.findMany({
                where: { followerId: userId },
                orderBy: { id: 'desc' },
                skip,
                take,
                include: {
                    following: {
                        select: { id: true, fullname: true, username: true },
                    },
                },
            });

            return {
                success: true,
                data: following.map(f => f.following),
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi ƒëang theo d√µi',
                error: error.message,
            };
        }
    }
    async countFollowers(userId: number) {
        try {
            const count = await this.prismaService.follow.count({
                where: { followingId: userId },
            });
            return {
                success: true,
                data: count,
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi ƒë·∫øm ng∆∞·ªùi theo d√µi',
                error: error.message,
            };
        }
    }
    async countFollowing(userId: number) {
        try {
            const count = await this.prismaService.follow.count({
                where: { followerId: userId },
            });
            return {
                success: true,
                data: count,
            };
        } catch (error) {
            return {
                success: false,
                message: 'L·ªói khi ƒë·∫øm ng∆∞·ªùi ƒëang theo d√µi',
                error: error.message,
            };
        }
    }
}
